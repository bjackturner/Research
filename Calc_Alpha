# Research 1

import numpy as np
from math import *
import matplotlib.pyplot as plt

def alpha_s(a,m):
    # Calculates the angle and entropy angle
    a_s = np.arctan(np.tan(a)/m)
    while a_s < 0:
        a_s = a_s + np.pi

    return a_s

def Pressure(M1, gamma):
    return 1 + (2 * gamma / (gamma + 1)) * (M1**2 - 1)

def calculate_m(M1,gamma):
    # Solve for m using M1
    return ((gamma + 1) * M1**2)/(2 + ((gamma - 1) * M1**2))

def tbm(t,b,m): #theta-beta-M relation
    return tan(b-t)/tan(b) - (2 + 0.4*(m*sin(b))**2)/(2.4*(m*sin(b))**2)

def th_tbm(m,b): #explicit form of the theta-beta-M relation
    th = atan((2*(m*sin(b))**2-2)/(m**2*(gamma+cos(2*b))+2)/tan(b))
    return abs(th)

def calculate_M2(M1,gamma,beta):
    if beta == 90:
        return np.sqrt((M1**2 + (2 /(gamma - 1))) / (((2 * gamma)/(gamma - 1)) * M1**2 - 1))

def calculate_decay_rate_prime(M1,M2,m,a,aPrime):
    deg = 180 / np.pi
    # Solve for Decay Rate, Zeta, and Pressure Wave Angle (ap). Values found if regime is propagative or nonpropagative
    ac = np.arctan((m * M2)/(np.sqrt(1 - M2**2))) # Critical Angle
    acp = np.arccos(-M2) # Resulting Angle of Pressure 
    # Upper and Lower angles of critical region (Acoustic Waves)
    aM = np.arccos(-1/M1)
    acu = bisection_solve(0.000000001, np.pi, -1, 1e-6, M1, M2, m) # Find acl
    acl = bisection_solve(0.000000001, np.pi, 1, 1e-6, M1, M2, m) # Find acu

    if a > -acl and a < 0:
        ap = np.arctan(np.tan(acp)/((np.tan(ac)/np.tan(aPrime)) - ((1/M2) * np.sqrt((np.tan(ac)/np.tan(aPrime))**2 - 1))))
        if ap < 0:
            ap = ap + np.pi
        decay_rate = 0
        Zeta = 1

    elif a > 0 and a < acl:
        ap = np.arctan(np.tan(acp)/((np.tan(ac)/np.tan(aPrime)) + ((1/M2) * np.sqrt((np.tan(ac)/np.tan(aPrime))**2 - 1))))
        while ap < np.pi:
            ap = ap + np.pi
        decay_rate = 0
        Zeta = 1

    return ap, decay_rate, Zeta

def calculate_aPrime(M1,a):
    # Find alpha prime. A new angle that is related to alpha
    if a == 0:
        return 0
    
    else:
        aPrime = np.arctan(1/((1/np.tan(a)) + (1/(M1 * np.sin(a)))))
        if aPrime < 0:
            aPrime = aPrime + np.pi

        return aPrime

def Crit_Angles(M1, gamma,beta):

    M2 = calculate_M2(M1,gamma,beta)
    m = calculate_m(M1,gamma)

    aM = np.arccos(-1/M1)
    acu = bisection_solve(0.000000001, np.pi, -1, 1e-6, M1, M2, m) # Find acl
    acl = bisection_solve(0.000000001, np.pi, 1, 1e-6, M1, M2, m) # Find acu

    return aM, acu, acl

def equation_to_solve(a, sign, M1, M2, m):
    # Equation that is the relationship between alpha and acl and acu
    eq = (1/np.tan(a)) + 1 / (M1 * np.sin(a)) - sign * np.sqrt(1 - M2**2) / (m * M2)
    return eq

def bisection_solve(a_min, a_max, sign, tol, M1, M2, m):
    # Method of Solving for acu and acl becuase there is no exact solultion.
    while abs(a_max - a_min) > tol:
        a_mid = (a_min + a_max) / 2
        if equation_to_solve(a_min, sign, M1, M2, m) * equation_to_solve(a_mid, sign, M1, M2, m) < 0:
            a_max = a_mid
        else:
            a_min = a_mid
    return a_min

def make_A(a,a_s,ap,decay_rate,Zeta,M2,m,gamma):
    # Used to build A matrix. This is used to solve for all following values.
    A = np.array([[np.sin(a_s), -1, (1/gamma) + ((np.cos(ap) + decay_rate*1J)/(gamma * M2 * Zeta)), 1J*(m - 1) * np.cos(a)],
              [2 * np.sin(a_s), -1, ((M2**2 + 1)/(gamma * M2**2)) + ((2 * np.cos(ap) + 1J * decay_rate)/(gamma * M2 * Zeta)), 0],
              [-np.cos(a_s), 0, (np.sin(ap))/(gamma * M2 * Zeta), 1J * (1 - m) * np.sin(a)],
              [np.sin(a_s), (1/((gamma - 1) * M2**2)), (1 / (gamma * M2**2)) + ((np.cos(ap) + 1J * decay_rate)/(gamma * M2 * Zeta)), 1J * m * (1 - m)*np.cos(a)]])
    return A

def Calc_Zpp(a,M1,beta):
    P2P1 = Pressure(M1, gamma)  
    m = calculate_m(M1,gamma) # Solve m
    M2 = calculate_M2(M1,gamma,beta)
    a_s = alpha_s(a,m) # Solve for angles
    aPrime = calculate_aPrime(M1,a) # Find Alpha Prime
    # Solve for new flow properties using aplha prime instead of alpha
    ap, decay_rate, Zeta = calculate_decay_rate_prime(M1,M2,m,a,aPrime)
    # Build new A matrix with alpha prime instead of alpha
    APrime = make_A(aPrime,a_s,ap,decay_rate,Zeta,M2,m,gamma)

    # b matrix of equation A27
    d = np.array([
        (1/gamma) + (np.cos(a)/(gamma * M1)),
        (m/gamma) * ((((M1**2) + 1)/(M1**2)) + ((2 * np.cos(a))/M1)),
        (m * np.sin(a))/(gamma * M1),
        ((m**2)/gamma) * ((1/(M1**2)) + (np.cos(a)/M1))
    ])

    [Zpv, Zps, Zpp, ZpxSol] = np.linalg.solve(APrime,d) # Solve for Z vaules of equation A27

    return Zpp * P2P1

rad = np.pi / 180
# Inputs Enter Here
M1 = 8 # Mach 1 Entry
gamma = 5/3
beta = 90

aM, acu, acl = Crit_Angles(M1, gamma,beta)

a = -acl + (2 * rad)

ZppList = []
alpha = []

while a < acl - (1.5 * rad):
    ZppList.append(Calc_Zpp(a,M1,beta))
    alpha.append(a * 180/pi)
    a = a + 1e-2

plt.plot(alpha,ZppList)
plt.xlabel('Theta [deg]')
plt.ylabel("p2'/p1")
plt.ylim(min(ZppList) - 1,Calc_Zpp(-acl + (2 * rad),M1,beta))
plt.grid()
plt.savefig('/workspaces/Research/Zpp.png')
