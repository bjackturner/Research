# Research 1

import numpy as np
from math import *
import matplotlib.pyplot as plt
import scipy as sp
import pandas as pd

rad = np.pi / 180

def th_tbm(m,b, gamma): #explicit form of the theta-beta-M relation
    th = np.arctan((2*(m*np.sin(b))**2-2)/(m**2*(gamma+np.cos(2*b))+2)/np.tan(b))
    return abs(th)

def calculate_M2(M1,gamma,beta):
    if beta == np.pi/2:
        M2 = np.sqrt((M1**2 + (2 /(gamma - 1))) / (((2 * gamma)/(gamma - 1)) * M1**2 - 1))
        PR = 1 + (2 * gamma / (gamma + 1)) * (M1**2 - 1)
        m = ((gamma + 1) * M1**2)/(2 + ((gamma - 1) * M1**2))
        TR = ((2 * gamma * M1**2 - (gamma - 1)) * ((gamma - 1) * M1**2 + 2))/((gamma + 1)**2 * M1**2)
        return M2, PR, m, TR
    
    elif beta < np.pi/2:
        th = th_tbm(M1, beta, gamma)
        M1n = M1 * np.sin(beta)
        M2n = (np.sqrt((M1n**2 + (2 /(gamma - 1))) / (((2 * gamma)/(gamma - 1)) * M1n**2 - 1)))
        PR = 1 + (2 * gamma / (gamma + 1)) * (M1n**2 - 1)
        m = ((gamma + 1) * M1n**2)/(2 + ((gamma - 1) * M1n**2))
        TR = ((2 * gamma * M1n**2 - (gamma - 1)) * ((gamma - 1) * M1n**2 + 2))/((gamma + 1)**2 * M1n**2)
        return M1n, M2n, PR, m, TR
        
def alpha_s(a,m):
    # Calculates the angle and entropy angle
    a_s = np.arctan(np.tan(a)/m)
    while a_s < 0:
        a_s = a_s + np.pi

    return a_s

def calculate_aPrime(M1,a):
    # Find alpha prime. A new angle that is related to alpha
    if a == 0:
        return 0
    
    else:
        aPrime = np.arctan(1/((1/np.tan(a)) + (1/(M1 * np.sin(a)))))
        if aPrime < 0:
            aPrime = aPrime + np.pi

        return aPrime

def Crit_Angles(M1, gamma,beta):

    if beta == np.pi/2:
        M2, PR, m, TR = calculate_M2(M1, gamma, beta)

    elif beta < np.pi/2:
        M1, M2, PR, m, TR = calculate_M2(M1, gamma, beta)

    aM = np.arccos(-1/M1)
    acu = bisection_solve(0.000000001, np.pi, -1, 1e-6, M1, M2, m) # Find acl
    acl = bisection_solve(0.000000001, np.pi, 1, 1e-6, M1, M2, m) # Find acu
    ac = np.arctan((m * M2)/(np.sqrt(1 - M2**2)))

    return aM, acu, acl, ac

def calculate_decay_rate(M2,m,a):
    # Solve for Decay Rate, Zeta, and Pressure Wave Angle (ap). Values found if regime is propagative or nonpropagative
    ac = np.arctan((m * M2) / (np.sqrt(1 - M2**2))) # Critical Angle
    acp = np.arccos(-M2) # Resulting Angle of Pressure 

    if a < 0:
        ap = np.arctan(np.tan(acp)/((np.tan(ac)/np.tan(a)) - ((1/M2) * np.sqrt((np.tan(ac)/np.tan(a))**2 - 1))))
        if ap < 0:
            ap = ap + np.pi
        decay_rate = 0
        Zeta = 1

    elif a > 0:
        ap = np.arctan(np.tan(acp)/((np.tan(ac)/np.tan(a)) + ((1/M2) * np.sqrt((np.tan(ac)/np.tan(a))**2 - 1))))
        while ap < np.pi:
            ap = ap + np.pi
        decay_rate = 0
        Zeta = 1

    else:
        # NonPropagative Regime both slow and fast wave
        ap = np.arctan(1/(((1/np.tan(acp)) * (1/np.tan(a)))/(1/np.tan(ac))))
        decay_rate = (abs((1/np.tan(acp))*np.sin(ap))/M2)*np.sqrt(1-(np.tan(ac)/np.tan(a))**2)
        Zeta = np.sqrt(1 - decay_rate**2 + 2*1J*decay_rate*np.cos(ap))

    return ap, decay_rate, Zeta

def calculate_decay_rate_prime(M1,M2,m,a,aPrime):
    deg = 180 / np.pi
    # Solve for Decay Rate, Zeta, and Pressure Wave Angle (ap). Values found if regime is propagative or nonpropagative
    ac = np.arctan((m * M2)/(np.sqrt(1 - M2**2))) # Critical Angle
    acp = np.arccos(-M2) # Resulting Angle of Pressure 

    # Upper and Lower angles of critical region (Acoustic Waves)
    aM = np.arccos(-1/M1)
    acu = bisection_solve(0.000000001, np.pi, -1, 1e-6, M1, M2, m) # Find acl
    acl = bisection_solve(0.000000001, np.pi, 1, 1e-6, M1, M2, m) # Find acu

    if a < 0:
        ap = np.arctan(np.tan(acp)/((np.tan(ac)/np.tan(aPrime)) - ((1/M2) * np.sqrt((np.tan(ac)/np.tan(aPrime))**2 - 1))))
        if ap < 0:
            ap = ap + np.pi
        decay_rate = 0
        Zeta = 1

    elif a > 0:
        ap = np.arctan(np.tan(acp)/((np.tan(ac)/np.tan(aPrime)) + ((1/M2) * np.sqrt((np.tan(ac)/np.tan(aPrime))**2 - 1))))
        while ap < np.pi:
            ap = ap + np.pi
        decay_rate = 0
        Zeta = 1
        
    return ap, decay_rate, Zeta

def equation_to_solve(a, sign, M1, M2, m):
    # Equation that is the relationship between alpha and acl and acu
    eq = (1/np.tan(a)) + 1 / (M1 * np.sin(a)) - sign * np.sqrt(1 - M2**2) / (m * M2)
    return eq

def bisection_solve(a_min, a_max, sign, tol, M1, M2, m):
    # Method of Solving for acu and acl becuase there is no exact solultion.
    while abs(a_max - a_min) > tol:
        a_mid = (a_min + a_max) / 2
        if equation_to_solve(a_min, sign, M1, M2, m) * equation_to_solve(a_mid, sign, M1, M2, m) < 0:
            a_max = a_mid
        else:
            a_min = a_mid
    return a_min

def make_A(a,a_s,ap,decay_rate,Zeta,M2,m,gamma):
    # Used to build A matrix. This is used to solve for all following values.
    A = np.array([[np.sin(a_s), -1, (1/gamma) + ((np.cos(ap) + decay_rate*1J)/(gamma * M2 * Zeta)), 1J*(m - 1) * np.cos(a)],
              [2 * np.sin(a_s), -1, ((M2**2 + 1)/(gamma * M2**2)) + ((2 * (np.cos(ap) + 1J * decay_rate))/(gamma * M2 * Zeta)), 0],
              [-np.cos(a_s), 0, (np.sin(ap))/(gamma * M2 * Zeta), 1J * (1 - m) * np.sin(a)],
              [np.sin(a_s), (1/((gamma - 1) * M2**2)), (1 / (gamma * M2**2)) + ((np.cos(ap) + 1J * decay_rate)/(gamma * M2 * Zeta)), 1J * m * (1 - m)*np.cos(a)]])
    return A

def moore(phi, M1, gamma, beta, CritLower, CritUpper):
    M2, PR, m, TR = calculate_M2(M1,gamma,beta)

    V = M1
    U = -V/m + V

    PhiVort = np.arctan((V - U)/(V/np.tan(phi) + 1/np.sin(phi)))
    if PhiVort < 0:
        PhiVort = PhiVort + np.pi

    Cx, Cy = (V - U), 0 
    r = np.sqrt(TR)
    Px, Py =  V, (V/np.tan(phi) + 1/np.sin(phi))

    dx, dy = Px-Cx, Py-Cy
    dxr, dyr = -dy, dx
    d = np.sqrt(dx**2+dy**2)
    if d >= r :
        rho = r/d
        ad = rho**2
        bd = rho*np.sqrt(1-rho**2)
        T1x = Cx + ad*dx + bd*dxr
        T1y = Cy + ad*dy + bd*dyr
        T2x = Cx + ad*dx - bd*dxr
        T2y = Cy + ad*dy - bd*dyr
    
    if phi <= CritLower:
        PhiRefract = np.arctan((Px - T1x)/(Py - T1y))
        decay_rate = 0
        zeta = 1

    elif phi >= CritUpper:
        PhiRefract = np.arctan((Px - T2x)/(Py - T2y))
        if PhiRefract < 0:
            PhiRefract = PhiRefract + np.pi

    return PhiVort, PhiRefract, decay_rate, zeta

def Calc_Zpp(a, M1, beta, gamma):
    # Amplitude ratios for incident acoustic waves (V = vorticity, S = entropy, P = pressure/ acoustic, X = position)

    # Post Shock Relations 
    if beta == np.pi/2: # Normal Shock
        M2, PR, m, TR = calculate_M2(M1, gamma, beta)

    elif beta < np.pi/2: # Oblique Shock
        M1, M2, PR, m, TR = calculate_M2(M1, gamma, beta)
    
    # Find Alpha Prime
    aPrime = calculate_aPrime(M1, a)

    # Find Post Shock Entropy/Vorticity angle from incident acoustic
    a_s = alpha_s(aPrime, m)

    # Find Post Shock Acoustic Wave angle from incident acoustic
    ap, decay_rate, Zeta = calculate_decay_rate_prime(M1, M2, m, a, aPrime)

    # Build new A matrix with alpha prime instead of alpha
    APrime = make_A(aPrime, a_s, ap, decay_rate, Zeta, M2, m, gamma)

    # b matrix of equation A27 from Fabre Paper
    d = np.array([
        (1/gamma) + (np.cos(a)/(gamma * M1)),
        (m/gamma) * ((((M1**2) + 1)/(M1**2)) + ((2 * np.cos(a))/M1)),
        (m * np.sin(a))/(gamma * M1),
        ((m**2)/gamma) * ((1/(M1**2)) + (np.cos(a)/M1))
    ])

    # Solve for Z vaules of equation A27
    [Zpv, Zps, Zpp, ZpxSol] = np.linalg.solve(APrime,d) 

    return Zpp * PR

def Calc_Zss(a,M1,beta):

    # Post Shock Relations 
    if beta == np.pi/2: # Normal Shock
        M2, PR, m, TR = calculate_M2(M1, gamma, beta)

    elif beta < np.pi/2: # Oblique Shock
        M1, M2, PR, m, TR = calculate_M2(M1, gamma, beta)
    
    a_s = alpha_s(a,m) # Solve for angles
    ap, decay_rate, Zeta = calculate_decay_rate(M2,m,a) #Solve Other flow properties 

    A = make_A(a,a_s,ap,decay_rate,Zeta,M2,m,gamma) # Build A matrix

    b = np.array([-1, -m, 0, m**2 / ((gamma - 1) * M1**2)]).reshape((-1, 1)) # b matrix of equation A18

    [Zsv, Zss, Zsp, Zsx] = np.linalg.solve(A, b) # Solve for Z vaules of equation A18

    return Zsp * PR

def Calc_Zvv(a,M1,beta):

    # Post Shock Relations 
    if beta == np.pi/2: # Normal Shock
        M2, PR, m, TR = calculate_M2(M1, gamma, beta)

    elif beta < np.pi/2: # Oblique Shock
        M1, M2, PR, m, TR = calculate_M2(M1, gamma, beta)

    a_s = alpha_s(a,m) # Solve for angles

    ap, decay_rate, Zeta = calculate_decay_rate(M2,m,a) #Solve Other flow properties 

    A = make_A(a,a_s,ap,decay_rate,Zeta,M2,m,gamma) # Build A matrix

    c = np.array([np.sin(a), 2 * m * np.sin(a), -m * np.cos(a), m**2 * np.sin(a)]).reshape((-1,1))

    [Zvv, Zvs, Zvp, Zvx] = np.linalg.solve(A,c) # Solve for Z vaules of equation A20

    return Zvp * PR / M1

ZppNormData = pd.read_csv('Data/ZppNorm.csv')
ZppStrongData = pd.read_csv('Data/ZppStrong.csv')
ZppWeakData = pd.read_csv('Data/ZppWeak.csv')

ZspNormData = pd.read_csv('Data/ZspNorm.csv')
ZspStrongData = pd.read_csv('Data/ZspStrong.csv')
ZspWeakData = pd.read_csv('Data/ZspWeak.csv')

def ZppNormPlot(M1, gamma):

    # Zpp Normal Shock ============================================================================================================
    
    ZppNorm = []
    
    aM, acu, acl, ac = Crit_Angles(M1, gamma, 90*rad)

    alphaNorm = np.linspace(-acl/rad, acl/rad, 200)

    for a in alphaNorm:
        ZppNorm.append(Calc_Zpp(a*rad,M1,90*rad, gamma))

    plt.figure
    plt.plot(alphaNorm,np.real(ZppNorm), label = 'Calculated Solution', color = 'blue')

    # plt.plot(ZppNormData.iloc[:,0],ZppNormData.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim(32,45)
    plt.savefig('/workspaces/Research/Images/ZppNorm.png')
    plt.show
    print("acl = ",acl*180/np.pi,"acu = ",acu*180/np.pi)

    plt.cla()
    plt.clf()
    plt.close()
def ZppStrongPlot(M1, gamma):

    # Zpp Strong Oblique Shock ===================================================================================================

    ZppStrong = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 65.89*rad)

    alphaStrong = np.linspace(-acl/rad, acl/rad, 200)

    for a in alphaStrong:
        ZppStrong.append(Calc_Zpp(a*rad,M1,65.89*rad))

    plt.figure
    plt.plot(alphaStrong,np.real(ZppStrong), label = 'Calculated Solution', color = 'blue')

    plt.plot(ZppStrongData.iloc[:,0],ZppStrongData.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim(25,35)
    plt.savefig('/workspaces/Research/Images/ZppStrong.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZppWeakPlot(M1, gamma):

    # Zpp Weak Oblique Shock ===================================================================================================

    ZppWeak = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 35.09*rad)

    alphaWeak = np.linspace(-acl/rad, acl/rad, 200)

    for a in alphaWeak:
        ZppWeak.append(Calc_Zpp(a*rad,M1,35.09*rad))

    plt.figure
    plt.plot(alphaWeak,np.real(ZppWeak), label = 'Calculated Solution', color = 'blue')

    plt.plot(ZppWeakData.iloc[:,0],ZppWeakData.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim(11,20)
    plt.savefig('/workspaces/Research/Images/ZppWeak.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()

def ZspNormPlot(M1, gamma):

    # Zsp Normal Shock ============================================================================================================

    ZspNorm = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 90*rad)

    alphaNorm = np.linspace(-ac/rad, ac/rad, 200)

    for a in alphaNorm:
        ZspNorm.append(Calc_Zss(a*rad,M1,90*rad))

    plt.figure
    plt.plot(alphaNorm,np.real(ZspNorm), label = 'Calculated Solution', color = 'blue')

    plt.plot(ZspNormData.iloc[:,0],ZspNormData.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim()
    plt.savefig('/workspaces/Research/Images/ZspNorm.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZspStrongPlot(M1, gamma):

    # Zsp Strong Oblique Shock ============================================================================================================

    ZspStrong = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 65.89*rad)

    alphaNorm = np.linspace(-ac/rad, ac/rad, 200)

    for a in alphaNorm:
        ZspStrong.append(Calc_Zss(a*rad,M1,65.89*rad))

    plt.figure
    plt.plot(alphaNorm,np.real(ZspStrong), label = 'Calculated Solution', color = 'blue')

    plt.plot(ZspStrongData.iloc[:,0],ZspStrongData.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim()
    plt.savefig('/workspaces/Research/Images/ZspStrong.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZspWeakPlot(M1, gamma):
    
    # Zsp Weak Oblique Shock ============================================================================================================

    ZspWeak = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 35.09*rad)

    alphaNorm = np.linspace(-ac/rad, ac/rad, 200)

    for a in alphaNorm:
        ZspWeak.append(Calc_Zss(a*rad,M1,35.09*rad))

    plt.figure
    plt.plot(alphaNorm,np.real(ZspWeak), label = 'Calculated Solution', color = 'blue')

    plt.plot(ZspWeakData.iloc[:,0],ZspWeakData.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim()
    plt.savefig('/workspaces/Research/Images/ZspWeak.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()

def ZvpNormPlot(M1, gamma):
    # Zpp Normal Shock ============================================================================================================
    
    ZvpNorm = []
    
    aM, acu, acl, ac = Crit_Angles(M1, gamma, 90*rad)

    alphaNorm = np.linspace(-ac/rad, ac/rad, 200)

    for a in alphaNorm:
        ZvpNorm.append(Calc_Zvv(a*rad,M1,90*rad))

    plt.figure
    plt.plot(alphaNorm,np.real(ZvpNorm), label = 'Calculated Solution', color = 'blue')

    # plt.plot(WesNorm.iloc[:,0],WesNorm.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim()
    plt.savefig('/workspaces/Research/Images/ZvpNorm.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZvpStrongPlot(M1, gamma):

    # Zpp Strong Oblique Shock ===================================================================================================

    ZvpStrong = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 65.89*rad)

    alphaStrong = np.linspace(-ac/rad, ac/rad, 200)

    for a in alphaStrong:
        ZvpStrong.append(Calc_Zvv(a*rad,M1,65.89*rad))

    plt.figure
    plt.plot(alphaStrong,np.real(ZvpStrong), label = 'Calculated Solution', color = 'blue')

    # plt.plot(WesStrong.iloc[:,0],WesStrong.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim()
    plt.savefig('/workspaces/Research/Images/ZvpStrong.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZvpWeakPlot(M1, gamma):

    # Zpp Weak Oblique Shock ===================================================================================================

    ZvpWeak = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 35.09*rad)

    alphaWeak = np.linspace(-ac/rad, ac/rad, 200)

    for a in alphaWeak:
        ZvpWeak.append(Calc_Zvv(a*rad,M1,35.09*rad))

    plt.figure
    plt.plot(alphaWeak,np.real(ZvpWeak), label = 'Calculated Solution', color = 'blue')

    # plt.plot(WesWeak.iloc[:,0],WesWeak.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim()
    plt.savefig('/workspaces/Research/Images/ZvpWeak.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()

def ZppRefNormPlot(M1, gamma):
    # Zpp Normal Shock ============================================================================================================
    
    ZppRefNorm = []
    
    aM, acu, acl, ac = Crit_Angles(M1, gamma, 90*rad)

    alphaNorm = np.concatenate((np.linspace(-180, -acu/rad, 100), np.linspace(acu/rad, 180, 100)))

    for a in alphaNorm:
        ZppRefNorm.append(Calc_Zpp(a*rad,M1,90*rad))

    plt.figure
    plt.plot(alphaNorm,np.real(ZppRefNorm), label = 'Calculated Solution', color = 'blue')

    # plt.plot(WesNorm.iloc[:,0],WesNorm.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.savefig('/workspaces/Research/Images/ZppRefNorm.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZppRefStrongPlot(M1, gamma):

    # Zpp Strong Oblique Shock ===================================================================================================

    ZppStrong = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 65.89*rad)

    alphaStrong = np.linspace(-acl/rad, acl/rad, 200)

    for a in alphaStrong:
        ZppStrong.append(Calc_Zpp(a*rad,M1,65.89*rad))

    plt.figure
    plt.plot(alphaStrong,np.real(ZppStrong), label = 'Calculated Solution', color = 'blue')

    # plt.plot(WesStrong.iloc[:,0],WesStrong.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim(25,35)
    plt.savefig('/workspaces/Research/Images/ZppStrong.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()
def ZppRefWeakPlot(M1, gamma):

    # Zpp Weak Oblique Shock ===================================================================================================

    ZppWeak = []

    aM, acu, acl, ac = Crit_Angles(M1, gamma, 35.09*rad)

    alphaWeak = np.linspace(-acl/rad, acl/rad, 200)

    for a in alphaWeak:
        ZppWeak.append(Calc_Zpp(a*rad,M1,35.09*rad))

    plt.figure
    plt.plot(alphaWeak,np.real(ZppWeak), label = 'Calculated Solution', color = 'blue')

    # plt.plot(WesWeak.iloc[:,0],WesWeak.iloc[:,1], label = 'Westphal Solution', color = 'Red')

    plt.xlabel('Theta [deg]')
    plt.ylabel("p2'/p1")
    plt.grid()
    plt.ylim(11,20)
    plt.savefig('/workspaces/Research/Images/ZppWeak.png')
    plt.show

    plt.cla()
    plt.clf()
    plt.close()

# Inputs Enter Here
M1 = 8 # Mach 1 Entry
gamma = 7/5

ZppNormPlot(8, 7/5)
# ZppStrongPlot(M1, gamma)
# ZppWeakPlot(M1, gamma)

# ZspNormPlot(M1, gamma)
# ZspStrongPlot(M1, gamma)
# ZspWeakPlot(M1, gamma)

# ZvpNormPlot(M1, gamma)
# ZvpStrongPlot(M1, gamma)
# ZvpWeakPlot(M1, gamma)

# ZppRefNormPlot(M1, gamma)
# # ZppRefStrongPlot(M1, gamma)
# # ZppRefWeakPlot(M1, gamma)